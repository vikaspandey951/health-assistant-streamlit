import streamlit as st # Import streamlit to access secrets
import requests
import json
import pymupdf # fitz
from fpdf import FPDF
from fpdf.enums import XPos, YPos
from groq import Groq # Import Groq

# --- AI (Groq Cloud) Function ---
def get_ai_response(symptoms, report_text, user_name):
    # This is your "safe prompt"
    safe_prompt = f"""
    You are an AI Health Assistant. Analyze ONLY the provided user symptoms and the text from their uploaded medical report. Do NOT provide general medical information.

    USER SYMPTOMS: "{symptoms}"
    USER NAME: {user_name}
    MEDICAL REPORT TEXT: "{report_text}"

    Provide a concise analysis based ONLY on the provided data.
    - If no report text is provided, state that clearly.
    - Use **bold markdown** to highlight specific test results mentioned (like **High WBC Count**).
    - Clearly state the **Suggested Next Step** (e.g., "**Consult your doctor**").
    - Include this short disclaimer at the end: "Disclaimer: AI analysis, not medical advice. Consult your doctor."
    """

    try:
        # --- NEW GROQ API CALL ---
        # Get the API key from Streamlit secrets
        client = Groq(api_key=st.secrets["GROQ_API_KEY"])

        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": "You are a helpful AI Health Assistant following specific instructions.",
                },
                {
                    "role": "user",
                    "content": safe_prompt, # Send the prompt we already built
                }
            ],
            model="llama3-8b-8192", # Use a Llama3 model on Groq
        )
        ai_response_content = chat_completion.choices[0].message.content
        return ai_response_content
        # --- END NEW GROQ API CALL ---

    except Exception as e: # Catch any kind of error
        print(f"Error calling Groq API: {e}") # Print error to logs
        # Check if the error is due to missing API key
        if "GROQ_API_KEY" in str(e) or "authentication" in str(e).lower():
             return "Error: Groq API key is missing or invalid. Please check your Streamlit secrets."
        return f"Error connecting to AI service: {e}"

# --- PDF Parsing Function ---
def extract_text_from_pdf(pdf_file):
    report_text = ""
    try:
        # Open the PDF file from the uploaded byte stream
        # pdf_file is an UploadedFile object from Streamlit
        doc = pymupdf.open(stream=pdf_file.read(), filetype="pdf")
        for page in doc:
            report_text += page.get_text()
        return report_text
    except Exception as e:
        print(f"Error reading PDF: {e}") # Print error to logs
        return f"Error reading PDF: {e}"

# --- PDF Generation Function ---
def create_pdf_report(report_content, user_name):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Helvetica", "B", 16)
    pdf.cell(0, 10, txt=f"Health Report Summary for {user_name}", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
    pdf.ln(10) # Add space
    pdf.set_font("Helvetica", size=12)

    # Basic handling for markdown bolding - replace ** with nothing for PDF
    # For proper markdown rendering in PDF, a more advanced library like reportlab might be needed
    cleaned_content = report_content.replace("**", "")

    pdf.multi_cell(0, 10, txt=cleaned_content)
    pdf.ln(5)
    pdf.set_font("Helvetica", "I", 10)
    pdf.cell(0, 10, txt="Generated by AI Health Assistant", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')


    # Save PDF to a byte stream to be downloaded
    # Use bytes() to convert bytearray to bytes for Streamlit download button
    return bytes(pdf.output(dest='S'))